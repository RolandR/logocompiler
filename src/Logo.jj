// Author: Olivier Biberstein
// Date: 2015-12-09
//
// Parser and translator of a subset of Logo into Java

options {
   LOOKAHEAD = 2;
   FORCE_LA_CHECK = true;
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Logo)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Logo {

  static private File javaFile, htmlFile;   // output files
  static private PrintWriter pw;            // printwriter used for every output
  static private int numIndent = 0;         // size of indentation
  static private int repcountNum = 0;       // number for multiple REPEATs

  // to pretty-print the translation
  // uses numIndent and pw defined as static variables in LogoParser
  // writes in pw the numIndent times the indent string
  public static void indent() {
    for (int i=0; i<numIndent; i++) { pw.print("   "); }
  }

  // Main method that reads the source file ".logo" and translates it
  // into two files: ".java" ".html"
  public static void main(String args[]) throws ParseException,
                                                TokenMgrError,
                                                IOException
  {
    // reads the source file ".logo" (first argument of command line)
    BufferedReader in = new BufferedReader(new FileReader(args[0]));
    Logo parser = new Logo(in);
    try {
      parser.start();
      System.out.println("DONE");
    }
    catch (ParseException x) { System.out.println("Syntaxtic Error"); throw x; }
    catch (TokenMgrError x)  { System.out.println("Lexical Error"); throw x; }
  }
}
PARSER_END(Logo)

// skip separators
SKIP : { <" " | "\t" | "\n" | "\r"> }
// skip comments of the form "# .... \n"
SKIP : { <"#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> }

// Constants, pre-defined, operators etc.
TOKEN: { <ADD: "+">   | <SUB: "-">  | <MUL: "*"> | <DIV: "/"> }
TOKEN: { <LPAR: "(">  | <RPAR: ")"> | <#PARSEP: ":"> }
TOKEN: { <LBRA: "[">  | <RBRA: "]"> }
TOKEN: { <EQ: "==">   | <NE: "!=">  }
TOKEN: { <LT: "<">    | <GT: ">">   | <LE: "<="> | <GE: ">="> }
TOKEN: { <AND: "AND"> | <OR: "OR"> }
TOKEN: { <TRUE: "TRUE"> | <FALSE: "FALSE"> | <NOT: "NOT"> }
// REPCOUNT is a pre-defined identifier rather than a keyword
TOKEN: { <REPCOUNT: "REPCOUNT"> }
// Keywords
TOKEN: {
  <CLEARSCREEN: "CS"> |
  <PENDOWN: "PD">     | <PENUP: "PU">      |
  <FORWARD: "FD">     | <BACKWARD: "BK">   |
  <LEFTTURN: "LT">    | <RIGHTTURN: "RT">  |
  <HIDETURTLE: "HT">  | <SHOWTURTLE: "ST"> |
  <WAIT: "WAIT">      | <REPEAT: "REPEAT"> |
  <IF: "IF">          | <IFELSE: "IFELSE"> |
  <SUBROUTINE: "TO">  |
  <LOGO: "LOGO">      | <END: "END">
}
// Numerical values, identifiers, and parameters
TOKEN: { <#DIGIT:  ["0"-"9"]> }
TOKEN: { <#LETTER: ["A"-"Z"]> }
TOKEN: { <NUM: (<DIGIT>)+ | (<DIGIT>)+ "." (<DIGIT>)+ > }
TOKEN: { <IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > }
TOKEN: { <PARAMETER: <PARSEP> <IDENTIFIER> > // removes parameter separator
          { matchedToken.image=image.substring(1,image.length()); } }

void start() throws IOException:
{
	Token t;
	String sub;
	String stat;
}
{
  // logo programs start with LOGO followed by an identifier
  <LOGO>  t = <IDENTIFIER>
  // Creation of the output files
  {
    // Create the HTML file for the applet
    htmlFile = new File(t.image.toLowerCase() + ".html");
    pw = new PrintWriter(new FileOutputStream(htmlFile)); 
    pw.println("<html>");
    pw.println("  <body>");
    pw.println("  <applet code='" + t.image.toLowerCase() +
               ".class'width=600 height=600></applet>");
    pw.println("  </html>");
    pw.println("</body>");
    pw.close();
    //Create the Java file and the class
    javaFile = new File(t.image.toLowerCase() + ".java");
    pw = new PrintWriter(new FileOutputStream(javaFile));
    pw.println("import java.awt.Graphics;\n");
    pw.println("import java.util.Stack;\n");
    pw.println("public class " + t.image.toLowerCase() +
               " extends java.applet.Applet {\n" );
    numIndent++;
    indent();
    pw.println("private LogoPrimitives l;\n");
    indent();
    pw.println("private Stack<Integer> repcount = new Stack<Integer>();\n"); // for nested repeats, we'll use a stack for repcount
  }

   (sub = subroutine()
		{
			indent();
			pw.println(sub);
		}
	)*

	 // Open the necessary method "paint" of the applet
   {
     indent(); numIndent++;
     pw.println("public void paint(Graphics g) {");
     indent();
     pw.println("l = new LogoPrimitives(this);");
     pw.println();
   }
   
	(stat = statement()
		{
		   indent();
		   pw.println(stat);
		}
	)*
   
   // close the method "paint"
   {
      numIndent--;
      indent();
      pw.println("}");
   }
   //close the class
  
	<END>
		{
			numIndent--;
			indent();
			pw.println("}");
			pw.flush();
			pw.close();
		}
}

String subroutine():
{
	Token identifier;
	Token p;
	ArrayList<String> params = new ArrayList<String>();
	String paramString = "";
	String statement;
	String statements = "";
	String sub;
	int i;
}
{
	(
		<SUBROUTINE>
		identifier = <IDENTIFIER>
		(p = <PARAMETER> {params.add("double "+p.image);})*
		(statement = statement() {statements += "   " + statement + "\n";})*
		<END>
	)

	{
		for(i = 0; i < params.size(); i++){
			paramString += params.get(i);
			if(i != params.size() - 1){
				paramString += ", ";
			}
		}
		sub = "private void "+identifier+"("+paramString+"){\n";
		sub += statements;
		sub += "}\n";

		return sub;
	}
}

String statement():
{
	String s = "";
	String param;
	String condition;
	ArrayList<String> params = new ArrayList<String>();
	String paramString = "";
	String statements = "";
	String elseStatements = "";
	Token t;
	String count;
	int i;
}
{
	(
		// Simple Statements
		 <CLEARSCREEN> {s = "l.cs();";}
		|<PENDOWN> {s = "l.pd();";}
		|<PENUP> {s = "l.pu();";}
		|<HIDETURTLE> {s = "l.ht();";}
		|<SHOWTURTLE> {s = "l.st();";}
		// Statements with one parameter
		|<FORWARD> param = nExpr() {s = "l.fd("+param+");";}
		|<BACKWARD> param = nExpr() {s = "l.bk("+param+");";}
		|<LEFTTURN> param = nExpr() {s = "l.rt("+param+");";}
		|<RIGHTTURN> param = nExpr() {s = "l.lt("+param+");";}
		|<WAIT> param = nExpr() {s = "l.wait("+param+");";}
		// More complex statements
		|<REPEAT> count = nExpr() <LBRA> (param = statement() {statements += "   " + param + "\n";})* <RBRA> {

				s = "for(repcount.push(0); repcount.peek() <= ("+count+"); repcount.push(repcount.pop() + 1)){\n";
				s += statements;
				s += "}\n";
				s += "repcount.pop();";
			}
		|<IF> condition = bExpr() <LBRA> (param = statement() {statements += "   " + param + "\n";})* <RBRA> {
				s = "if("+condition+"){";
				s += statements;
				s += "}";
			}
		|<IFELSE> condition = bExpr() <LBRA> (param = statement() {statements += "   " + param + "\n";})* <RBRA> <LBRA> (param = statement() {elseStatements += "   " + param + "\n";})* <RBRA> {
				s = "if("+condition+"){";
				s += statements;
				s += "} else {";
				s += elseStatements;
				s += "}";
			}
		|t=<IDENTIFIER> (param = nExpr() {params.add(param);})* {
					s = t.image + "(";
					for(i = 0; i < params.size(); i++){
						paramString += params.get(i);
						if(i != params.size() - 1){
							paramString += ", ";
						}
					}
					s += paramString + ");";
				}
	)
	{return s;}
}

String nExpr():
{
	String exp;
	String term;
}
{
	exp = nTerm() ((<ADD> {exp += " + ";} | <SUB> {exp += " - ";}) term = nTerm() {exp += term;})*
	
	{return exp;}
}

String nTerm():
{
	String term;
	Token sign;
	String factor;
}
{
	term = nFactor() ((sign = <MUL> | sign = <DIV>) factor = nFactor() {term += sign.image + factor;})*
	{return term;}
}

String nFactor():
{
	String factor = "";
	String e;
	Token t = null;
}
{
	(<SUB> {factor += "-";})? (t = <NUM> | t = <REPCOUNT> | t = <PARAMETER> | <LPAR> e = nExpr() <RPAR> {factor += "("+e+")";})
	{
		if(t == null){
			
		} else if(t.image == "REPCOUNT"){
			factor += "repcount.peek()";
		} else {
			factor += t.image;
		}
		return factor;
	}
}

String bExpr():
{
	String expr;
	String term;
	Token comp;
}
{
	expr = bTerm() (comp = <OR> term = bTerm() {expr += comp.image + term;})*
	{return expr;}
}

String bTerm():
{
	String term;
	String factor;
	Token comp;
}
{
	term = bFactor() (comp = <AND> factor = bFactor() {term += comp.image + factor;} )*
	{return term;}
}

String bFactor():
{
	String factor = "";
	String expr;
	Token comp;
	Token literal;
}
{
	(
		 literal = <TRUE> {return literal.image;}
		|literal = <FALSE> {return literal.image;}
		|<NOT> <LPAR> expr = bExpr() <RPAR> {factor = "!("+expr+")";}
		|factor = nExpr() (comp = <EQ> | comp = <NE>| comp = <LT> | comp = <GT> | comp = <LE> | comp = <GE>) expr = nExpr() {factor += comp.image + expr;}
	)
	
	{return factor;}
}





















