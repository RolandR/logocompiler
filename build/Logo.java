/* Logo.java */
/* Generated By:JavaCC: Do not edit this line. Logo.java */
import java.lang.*;
import java.io.*;
import java.util.*;

public class Logo implements LogoConstants {

  static private File javaFile, htmlFile;   // output files
  static private PrintWriter pw;            // printwriter used for every output
  static private int numIndent = 0;         // size of indentation
  static private int repcountNum = 0;       // number for multiple REPEATs

  // to pretty-print the translation
  // uses numIndent and pw defined as static variables in LogoParser
  // writes in pw the numIndent times the indent string
  public static void indent() {
    for (int i=0; i<numIndent; i++) { pw.print("   "); }
  }

  // Main method that reads the source file ".logo" and translates it
  // into two files: ".java" ".html"
  public static void main(String args[]) throws ParseException,
                                                TokenMgrError,
                                                IOException
  {
    // reads the source file ".logo" (first argument of command line)
    BufferedReader in = new BufferedReader(new FileReader(args[0]));
    Logo parser = new Logo(in);
    try {
      parser.start();
      System.out.println("DONE");
    }
    catch (ParseException x) { System.out.println("Syntaxtic Error"); throw x; }
    catch (TokenMgrError x)  { System.out.println("Lexical Error"); throw x; }
  }

  static final public void start() throws ParseException, IOException {
    trace_call("start");
    try {Token t;
        String sub;
        String stat;
      jj_consume_token(LOGO);
      t = jj_consume_token(IDENTIFIER);
// Create the HTML file for the applet
    htmlFile = new File(t.image.toLowerCase() + ".html");
    pw = new PrintWriter(new FileOutputStream(htmlFile));
    pw.println("<html>");
    pw.println("  <body>");
    pw.println("  <applet code='" + t.image.toLowerCase() +
               ".class'width=600 height=600></applet>");
    pw.println("  </html>");
    pw.println("</body>");
    pw.close();
    //Create the Java file and the class
    javaFile = new File(t.image.toLowerCase() + ".java");
    pw = new PrintWriter(new FileOutputStream(javaFile));
    pw.println("import java.awt.Graphics;\u005cn");
    pw.println("public class " + t.image.toLowerCase() +
               " extends java.applet.Applet {\u005cn" );
    numIndent++;
    indent();
    pw.println("private LogoPrimitives l;\u005cn");
    pw.println("private int repcount;\u005cn");
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        sub = subroutine();
indent();
                        pw.println(sub);
      }
indent(); numIndent++;
     pw.println("public void paint(Graphics g) {");
     indent();
     pw.println("l = new LogoPrimitives(this);");
     pw.println();
      label_2:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
        stat = statement();
indent();
                   pw.println(stat);
      }
numIndent--;
      indent();
      pw.println("}");
      jj_consume_token(END);
numIndent--;
                        indent();
                        pw.println("}");
                        pw.flush();
                        pw.close();
    } finally {
      trace_return("start");
    }
  }

  static final public String subroutine() throws ParseException {
    trace_call("subroutine");
    try {Token identifier;
        Token p;
        ArrayList<String> params = new ArrayList<String>();
        String paramString = "";
        String statement;
        String statements = "";
        String sub;
        int i;
      jj_consume_token(SUBROUTINE);
      identifier = jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_3;
        }
        p = jj_consume_token(PARAMETER);
params.add("int "+p.image);
      }
      label_4:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_4;
        }
        statement = statement();
statements += "\u005ct" + statement + "\u005cn";
      }
      jj_consume_token(END);
for(i = 0; i < params.size(); i++){
                        paramString += params.get(i);
                        if(i != params.size() - 1){
                                paramString += ", ";
                        }
                }
                sub = "private void "+identifier+"("+paramString+"){\u005cn";
                sub += statements;
                sub += "}\u005cn";

                {if ("" != null) return sub;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("subroutine");
    }
  }

  static final public String statement() throws ParseException {
    trace_call("statement");
    try {String s = "";
        String param;
        ArrayList<String> params = new ArrayList<String>();
        String paramString = "";
        String statements = "";
        String elseStatements = "";
        Token t;
        String count;
        int i;
      if (jj_2_10(2)) {
        jj_consume_token(CLEARSCREEN);
s = "l.cs();";
      } else if (jj_2_11(2)) {
        jj_consume_token(PENDOWN);
s = "l.pd();";
      } else if (jj_2_12(2)) {
        jj_consume_token(PENUP);
s = "l.pu();";
      } else if (jj_2_13(2)) {
        jj_consume_token(HIDETURTLE);
s = "l.et();";
      } else if (jj_2_14(2)) {
        jj_consume_token(SHOWTURTLE);
s = "l.dt();";
      } else if (jj_2_15(2)) {
        jj_consume_token(FORWARD);
        param = nExpr();
s = "l.fd("+param+");";
      } else if (jj_2_16(2)) {
        jj_consume_token(BACKWARD);
        param = nExpr();
s = "l.bk("+param+");";
      } else if (jj_2_17(2)) {
        jj_consume_token(LEFTTURN);
        param = nExpr();
s = "l.rt("+param+");";
      } else if (jj_2_18(2)) {
        jj_consume_token(RIGHTTURN);
        param = nExpr();
s = "l.lt("+param+");";
      } else if (jj_2_19(2)) {
        jj_consume_token(WAIT);
        param = nExpr();
s = "l.wait("+param+");";
      } else if (jj_2_20(2)) {
        jj_consume_token(REPEAT);
        count = nExpr();
        jj_consume_token(LBRA);
        label_5:
        while (true) {
          if (jj_2_5(2)) {
            ;
          } else {
            break label_5;
          }
          param = statement();
statements += "\u005ct" + param + "\u005cn";
        }
        jj_consume_token(RBRA);
s = "for(repcount = 0; repcount <= ("+count+"); repcount++){\u005cn";
                                s += statements;
                                s += "}";
      } else if (jj_2_21(2)) {
        jj_consume_token(IF);
        param = bExpr();
        jj_consume_token(LBRA);
        label_6:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_6;
          }
          param = statement();
statements += "\u005ct" + param + "\u005cn";
        }
        jj_consume_token(RBRA);
s = "if("+param+"){";
                                s += statements;
                                s += "}";
      } else if (jj_2_22(2)) {
        jj_consume_token(IFELSE);
        param = bExpr();
        jj_consume_token(LBRA);
        label_7:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_7;
          }
          param = statement();
statements += "\u005ct" + param + "\u005cn";
        }
        jj_consume_token(RBRA);
        jj_consume_token(LBRA);
        label_8:
        while (true) {
          if (jj_2_8(2)) {
            ;
          } else {
            break label_8;
          }
          param = statement();
elseStatements += "\u005ct" + param + "\u005cn";
        }
        jj_consume_token(RBRA);
s = "if("+param+"){";
                                s += statements;
                                s += "} else {";
                                s += elseStatements;
                                s += "}";
      } else if (jj_2_23(2)) {
        t = jj_consume_token(IDENTIFIER);
        label_9:
        while (true) {
          if (jj_2_9(2)) {
            ;
          } else {
            break label_9;
          }
          param = nExpr();
params.add(param);
        }
s = t.image + "(";
                                        for(i = 0; i < params.size(); i++){
                                                paramString += params.get(i);
                                                if(i != params.size() - 1){
                                                        paramString += ", ";
                                                }
                                        }
                                        s += paramString + ");";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

  static final public String nExpr() throws ParseException {
    trace_call("nExpr");
    try {String exp;
        String term;
      exp = nTerm();
      label_10:
      while (true) {
        if (jj_2_24(2)) {
          ;
        } else {
          break label_10;
        }
        if (jj_2_25(2)) {
          jj_consume_token(ADD);
exp += " + ";
        } else if (jj_2_26(2)) {
          jj_consume_token(SUB);
exp += " - ";
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        term = nTerm();
exp += term;
      }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("nExpr");
    }
  }

  static final public String nTerm() throws ParseException {
    trace_call("nTerm");
    try {String term;
        Token sign;
        String factor;
      term = nFactor();
      label_11:
      while (true) {
        if (jj_2_27(2)) {
          ;
        } else {
          break label_11;
        }
        if (jj_2_28(2)) {
          sign = jj_consume_token(MUL);
        } else if (jj_2_29(2)) {
          sign = jj_consume_token(DIV);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        factor = nFactor();
term += sign.image + factor;
      }
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("nTerm");
    }
  }

  static final public String nFactor() throws ParseException {
    trace_call("nFactor");
    try {String factor = "";
        String e;
        Token t = null;
      if (jj_2_30(2)) {
        jj_consume_token(SUB);
factor += "-";
      } else {
        ;
      }
      if (jj_2_31(2)) {
        t = jj_consume_token(NUM);
      } else if (jj_2_32(2)) {
        t = jj_consume_token(REPCOUNT);
      } else if (jj_2_33(2)) {
        t = jj_consume_token(PARAMETER);
      } else if (jj_2_34(2)) {
        jj_consume_token(LPAR);
        e = nExpr();
        jj_consume_token(RPAR);
factor += "("+e+")";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
if(t == null){

                } else if(t.image == "REPCOUNT"){
                        factor += "repcount";
                } else {
                        factor += t.image;
                }
                {if ("" != null) return factor;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("nFactor");
    }
  }

  static final public String bExpr() throws ParseException {
    trace_call("bExpr");
    try {String expr;
        String term;
        Token comp;
      expr = bTerm();
      label_12:
      while (true) {
        if (jj_2_35(2)) {
          ;
        } else {
          break label_12;
        }
        comp = jj_consume_token(OR);
        term = bTerm();
expr += comp.image + term;
      }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bExpr");
    }
  }

  static final public String bTerm() throws ParseException {
    trace_call("bTerm");
    try {String term;
        String factor;
        Token comp;
      term = bFactor();
      label_13:
      while (true) {
        if (jj_2_36(2)) {
          ;
        } else {
          break label_13;
        }
        comp = jj_consume_token(AND);
        factor = bFactor();
term += comp.image + factor;
      }
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bTerm");
    }
  }

  static final public String bFactor() throws ParseException {
    trace_call("bFactor");
    try {String factor = "";
        String expr;
        Token comp;
        Token literal;
      if (jj_2_43(2)) {
        literal = jj_consume_token(TRUE);
{if ("" != null) return literal.image;}
      } else if (jj_2_44(2)) {
        literal = jj_consume_token(FALSE);
{if ("" != null) return literal.image;}
      } else if (jj_2_45(2)) {
        jj_consume_token(NOT);
        jj_consume_token(LPAR);
        expr = bExpr();
        jj_consume_token(RPAR);
factor = "!("+expr+")";
      } else if (jj_2_46(2)) {
        factor = nExpr();
        if (jj_2_37(2)) {
          comp = jj_consume_token(EQ);
        } else if (jj_2_38(2)) {
          comp = jj_consume_token(NE);
        } else if (jj_2_39(2)) {
          comp = jj_consume_token(LT);
        } else if (jj_2_40(2)) {
          comp = jj_consume_token(GT);
        } else if (jj_2_41(2)) {
          comp = jj_consume_token(LE);
        } else if (jj_2_42(2)) {
          comp = jj_consume_token(GE);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        expr = nExpr();
factor += comp.image + expr;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return factor;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bFactor");
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(SUBROUTINE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_34()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_46()
 {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_scan_token(PARAMETER)) return true;
    return false;
  }

  static private boolean jj_3_45()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3_44()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_scan_token(IFELSE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_43()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_36()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_42()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_scan_token(WAIT)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_scan_token(RIGHTTURN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_scan_token(LEFTTURN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_scan_token(REPCOUNT)) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_scan_token(BACKWARD)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(FORWARD)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(SHOWTURTLE)) return true;
    return false;
  }

  static private boolean jj_3_41()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_scan_token(HIDETURTLE)) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_scan_token(PENUP)) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_scan_token(PENDOWN)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(CLEARSCREEN)) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3_29()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_40()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  static private boolean jj_3_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_39()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3_30()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(PARAMETER)) return true;
    return false;
  }

  static private boolean jj_3_38()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LogoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[46];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Logo(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Logo(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LogoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Logo(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LogoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Logo(LogoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LogoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 46; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
